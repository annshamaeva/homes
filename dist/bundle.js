/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./JS.js":
/*!***************!*\
  !*** ./JS.js ***!
  \***************/
/***/ (() => {

eval("window.application = {\n    blocks: {},\n    screens: {},\n    renderScreen: function (screenName) {\n        if (!window.application.screens[screenName]) {\n            console.log('Такой страницы не существует')\n        } else {\n            this.screens[screenName]\n        }\n        window.application.timers.forEach((element) => {\n            clearInterval(element)\n        })\n    },\n\n    renderBlock: function (blockName, container) {\n        if (!window.application.blocks[blockName]) {\n            console.log('Такого блока не существует')\n        } else {\n            this.blocks[blockName](container)\n        }\n    },\n    timers: [],\n    level: [],\n}\n\nconst memoryGame = document.querySelector('.memory-game')\nmemoryGame.style.display = 'none'\n\nconst button = document.querySelector('.button-level')\n\nbutton.addEventListener('click', () => {\n    //событие по клику\n    const formLevel = document.querySelector('.form-level')\n\n    switch (\n        formLevel //сравнить выражение сразу с несколькими вариантами проверки статусов игроков\n    ) {\n        case 'buttonOne':\n            window.application.screens['screenLevelOne'] = screenLevelOne()\n            window.application.screens.screenLevelOne\n            break\n        case 'buttonTwo':\n            window.application.screens['screenLevelTwo'] = screenLevelTwo()\n            window.application.screens.screenLevelTwo\n            break\n        case 'buttonThree':\n            window.application.screens['screenLevelThree'] = screenLevelThree()\n            window.application.screens.screenLevelThree\n            break\n        default: // иначе уровень не выбран\n            console.log('Уровень сложности игры не выбран')\n            break\n    }\n})\n\nfunction screenLevelOne() {\n    const buttonOne = document.querySelector('.button-one-level')\n    buttonOne.addEventListener('click', () => {\n        //событие по клику)\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'block'\n        const cards = document.querySelectorAll('.memory-card')\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(6) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n    let timer\n    let secs = 0\n    if (timer) clearInterval(timer)\n    secs = 0\n    document.getElementById('timer').innerHTML = secs + ' сек.'\n    timer = setInterval(function () {\n        secs++\n        document.getElementById('timer').innerHTML = secs + ' сек.'\n    }, 1000)\n}\n\nfunction screenLevelTwo() {\n    const buttonTwo = document.querySelector('.button-two-level')\n    buttonTwo.addEventListener('click', () => {\n        // событие по клику\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'block'\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        const cards = document.querySelectorAll('.memory-card')\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(12) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n}\n\nfunction screenLevelThree() {\n    const buttonThree = document.querySelector('.button-three-level')\n    buttonThree.addEventListener('click', () => {\n        // событие по клику\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'block'\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        const cards = document.querySelectorAll('.memory-card')\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(18) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n}\n\n\n//# sourceURL=webpack://tools-packages/./JS.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./JS.js"]();
/******/ 	
/******/ })()
;