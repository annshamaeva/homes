{"version":3,"file":"bundle.js","mappings":"MA2DA,SAASA,IA4EL,IAAIC,EA3EcC,SAASC,cAAc,qBAC/BC,iBAAiB,SAAS,KAEfF,SAASC,cAAc,cAC/BE,MAAMC,QAAU,OACzBN,EAAeK,MAAMC,QAAU,QAC/BC,EAAeF,MAAMC,QAAU,OAC/BE,EAAiBH,MAAMC,QAAU,OACjC,MAAMG,EAAQP,SAASQ,iBAAiB,gBAyDpCD,EAAME,SAASC,IACX,IAAIC,EAAYC,KAAKC,MAAuB,GAAjBD,KAAKE,OAAO,IACvCJ,EAAKP,MAAMY,MAAQJ,KAtD3B,IAEIK,EAAWC,EAFXC,GAAiB,EACjBC,GAAY,EAGhB,SAASC,IACL,IAAID,GACAE,OAASL,EAAb,CAIA,GAFAK,KAAKC,UAAUC,IAAI,SAEdL,EAGD,OAFAA,GAAiB,OACjBF,EAAYK,MAIhBJ,EAAaI,KAOTL,EAAUQ,QAAQC,YAAcR,EAAWO,QAAQC,WAKvDT,EAAUU,oBAAoB,QAASN,GACvCH,EAAWS,oBAAoB,QAASN,GAExCO,MAIAR,GAAY,EAEZS,YAAW,KACPZ,EAAUM,UAAUO,OAAO,QAC3BZ,EAAWK,UAAUO,OAAO,QAE5BF,GAAW,GACZ,MApCqB,CAa5B,CA0BA,SAASA,KACHT,EAAgBC,GAAa,EAAC,GAAO,IACrCH,EAAWC,GAAc,CAAC,KAAM,KACtC,CAUAV,EAAME,SAASC,GAASA,EAAKR,iBAAiB,QAASkB,IAAS,IAKpE,IAAIU,EAAO,EACP/B,GAAOgC,cAAchC,GACzB+B,EAAO,EACP9B,SAASgC,eAAe,SAASC,UAAYH,EAAO,QACpD/B,EAAQmC,aAAY,WAChBJ,IACA9B,SAASgC,eAAe,SAASC,UAAYH,EAAO,OACxD,GAAG,IACP,CAEA,SAASzB,IACaL,SAASC,cAAc,qBAC/BC,iBAAiB,SAAS,KAEfF,SAASC,cAAc,cAC/BE,MAAMC,QAAU,OACzBN,EAAeK,MAAMC,QAAU,OAC/BC,EAAeF,MAAMC,QAAU,QAC/BE,EAAiBH,MAAMC,QAAU,OAyD7BG,EAAME,SAASC,IACX,IAAIC,EAAYC,KAAKC,MAAwB,GAAlBD,KAAKE,OAAO,KACvCJ,EAAKP,MAAMY,MAAQJ,KAvD3B,IAEIK,EAAWC,EAFXC,GAAiB,EACjBC,GAAY,EAGhB,SAASC,IACL,IAAID,GACAE,OAASL,EAAb,CAIA,GAFAK,KAAKC,UAAUC,IAAI,SAEdL,EAGD,OAFAA,GAAiB,OACjBF,EAAYK,MAIhBJ,EAAaI,KAOTL,EAAUQ,QAAQC,YAAcR,EAAWO,QAAQC,WAKvDT,EAAUU,oBAAoB,QAASN,GACvCH,EAAWS,oBAAoB,QAASN,GAExCO,MAIAR,GAAY,EAEZS,YAAW,KACPZ,EAAUM,UAAUO,OAAO,QAC3BZ,EAAWK,UAAUO,OAAO,QAE5BF,GAAW,GACZ,MApCqB,CAa5B,CA0BA,SAASA,KACHT,EAAgBC,GAAa,EAAC,GAAO,IACrCH,EAAWC,GAAc,CAAC,KAAM,KACtC,CAEA,MAAMV,EAAQP,SAASQ,iBAAiB,gBAQxCD,EAAME,SAASC,GAASA,EAAKR,iBAAiB,QAASkB,IAAS,GAExE,CAEA,SAASd,IACeN,SAASC,cAAc,uBAC/BC,iBAAiB,SAAS,KAEjBF,SAASC,cAAc,cAC/BE,MAAMC,QAAU,OACzBN,EAAeK,MAAMC,QAAU,OAC/BC,EAAeF,MAAMC,QAAU,OAC/BE,EAAiBH,MAAMC,QAAU,QAyD7BG,EAAME,SAASC,IACX,IAAIC,EAAYC,KAAKC,MAAwB,GAAlBD,KAAKE,OAAO,KACvCJ,EAAKP,MAAMY,MAAQJ,KAvD3B,IAEIK,EAAWC,EAFXC,GAAiB,EACjBC,GAAY,EAGhB,SAASC,IACL,IAAID,GACAE,OAASL,EAAb,CAIA,GAFAK,KAAKC,UAAUC,IAAI,SAEdL,EAGD,OAFAA,GAAiB,OACjBF,EAAYK,MAIhBJ,EAAaI,KAOTL,EAAUQ,QAAQC,YAAcR,EAAWO,QAAQC,WAKvDT,EAAUU,oBAAoB,QAASN,GACvCH,EAAWS,oBAAoB,QAASN,GAExCO,MAIAR,GAAY,EAEZS,YAAW,KACPZ,EAAUM,UAAUO,OAAO,QAC3BZ,EAAWK,UAAUO,OAAO,QAE5BF,GAAW,GACZ,MApCqB,CAa5B,CA0BA,SAASA,KACHT,EAAgBC,GAAa,EAAC,GAAO,IACrCH,EAAWC,GAAc,CAAC,KAAM,KACtC,CAEA,MAAMV,EAAQP,SAASQ,iBAAiB,gBAQxCD,EAAME,SAASC,GAASA,EAAKR,iBAAiB,QAASkB,IAAS,GAExE,CApSAe,OAAOC,YAAc,CACjBC,OAAQ,CAAC,EACTC,QAAS,CAAC,EACVC,aAAc,SAAUC,GACfL,OAAOC,YAAYE,QAAQE,GAG5BnB,KAAKiB,QAAQE,GAFbC,QAAQC,IAAI,gCAIhBP,OAAOC,YAAYO,OAAOlC,SAASmC,IAC/Bb,cAAca,EAAO,GAE7B,EAEAC,YAAa,SAAUC,EAAWC,GACzBZ,OAAOC,YAAYC,OAAOS,GAG3BzB,KAAKgB,OAAOS,GAAWC,GAFvBN,QAAQC,IAAI,6BAIpB,EACAC,OAAQ,GACRK,MAAO,IAGQhD,SAASC,cAAc,gBAC/BE,MAAMC,QAAU,OAEZJ,SAASC,cAAc,iBAE/BC,iBAAiB,SAAS,KAI7B,OAFkBF,SAASC,cAAc,gBAKrC,IAAK,YACDkC,OAAOC,YAAYE,QAAwB,eAAIxC,IAC/CqC,OAAOC,YAAYE,QAAQxC,eAC3B,MACJ,IAAK,YACDqC,OAAOC,YAAYE,QAAwB,eAAIjC,IAC/C8B,OAAOC,YAAYE,QAAQjC,eAC3B,MACJ,IAAK,cACD8B,OAAOC,YAAYE,QAA0B,iBAAIhC,IACjD6B,OAAOC,YAAYE,QAAQhC,iBAC3B,MACJ,QACImC,QAAQC,IAAI,oCAEpB,IAGJ5C,EAAeK,MAAMC,QAAU,OAC/BC,EAAeF,MAAMC,QAAU,OAC/BE,EAAiBH,MAAMC,QAAU,M","sources":["webpack://tools-packages/./index.js"],"sourcesContent":["window.application = {\n    blocks: {},\n    screens: {},\n    renderScreen: function (screenName) {\n        if (!window.application.screens[screenName]) {\n            console.log('Такой страницы не существует')\n        } else {\n            this.screens[screenName]\n        }\n        window.application.timers.forEach((element) => {\n            clearInterval(element)\n        })\n    },\n\n    renderBlock: function (blockName, container) {\n        if (!window.application.blocks[blockName]) {\n            console.log('Такого блока не существует')\n        } else {\n            this.blocks[blockName](container)\n        }\n    },\n    timers: [],\n    level: [],\n}\n\nconst memoryGame = document.querySelector('.memory-game')\nmemoryGame.style.display = 'none' //скрываем все карты\n\nconst button = document.querySelector('.button-level') //кнопка начала игры\n\nbutton.addEventListener('click', () => {\n    //событие по клику\n    const formLevel = document.querySelector('.form-level')\n\n    switch (\n        formLevel //сравнить выражение сразу с несколькими вариантами проверки статусов игроков\n    ) {\n        case 'buttonOne':\n            window.application.screens['screenLevelOne'] = screenLevelOne()\n            window.application.screens.screenLevelOne\n            break\n        case 'buttonTwo':\n            window.application.screens['screenLevelTwo'] = screenLevelTwo()\n            window.application.screens.screenLevelTwo\n            break\n        case 'buttonThree':\n            window.application.screens['screenLevelThree'] = screenLevelThree()\n            window.application.screens.screenLevelThree\n            break\n        default: // иначе уровень не выбран\n            console.log('Уровень сложности игры не выбран')\n            break\n    }\n})\n\nscreenLevelOne.style.display = 'none'\nscreenLevelTwo.style.display = 'none'\nscreenLevelThree.style.display = 'none'\n\nfunction screenLevelOne() {\n    const buttonOne = document.querySelector('.button-one-level')\n    buttonOne.addEventListener('click', () => {\n        //событие по клику)\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'none' // блокируем экран с выбором уровня\n        screenLevelOne.style.display = 'block'\n        screenLevelTwo.style.display = 'none'\n        screenLevelThree.style.display = 'none'\n        const cards = document.querySelectorAll('.memory-card')\n\n        shuffle()\n\n        // описываем переворот карт и чтобы переворачивалось только две карты\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        //прописываем рандомное расположение карт\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(6) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n\n    //устанавливаем таймер игры\n    let timer\n    let secs = 0\n    if (timer) clearInterval(timer)\n    secs = 0\n    document.getElementById('timer').innerHTML = secs + ' сек.'\n    timer = setInterval(function () {\n        secs++\n        document.getElementById('timer').innerHTML = secs + ' сек.'\n    }, 1000)\n}\n\nfunction screenLevelTwo() {\n    const buttonTwo = document.querySelector('.button-two-level')\n    buttonTwo.addEventListener('click', () => {\n        // событие по клику\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'none'\n        screenLevelOne.style.display = 'none'\n        screenLevelTwo.style.display = 'block'\n        screenLevelThree.style.display = 'none'\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        const cards = document.querySelectorAll('.memory-card')\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(12) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n}\n\nfunction screenLevelThree() {\n    const buttonThree = document.querySelector('.button-three-level')\n    buttonThree.addEventListener('click', () => {\n        // событие по клику\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'none'\n        screenLevelOne.style.display = 'none'\n        screenLevelTwo.style.display = 'none'\n        screenLevelThree.style.display = 'block'\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        const cards = document.querySelectorAll('.memory-card')\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(18) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n}\n"],"names":["screenLevelOne","timer","document","querySelector","addEventListener","style","display","screenLevelTwo","screenLevelThree","cards","querySelectorAll","forEach","card","ramdomPos","Math","floor","random","order","firstCard","secondCard","hasFlippedCard","lockBoard","flipCard","this","classList","add","dataset","framework","removeEventListener","resetBoard","setTimeout","remove","secs","clearInterval","getElementById","innerHTML","setInterval","window","application","blocks","screens","renderScreen","screenName","console","log","timers","element","renderBlock","blockName","container","level"],"sourceRoot":""}