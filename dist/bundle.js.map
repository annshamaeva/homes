{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://tools-packages/./index.js"],"sourcesContent":["window.application = {\n    blocks: {},\n    screens: {},\n    renderScreen: function (screenName) {\n        if (!window.application.screens[screenName]) {\n            console.log('Такой страницы не существует')\n        } else {\n            this.screens[screenName]\n        }\n        window.application.timers.forEach((element) => {\n            clearInterval(element)\n        })\n    },\n\n    renderBlock: function (blockName, container) {\n        if (!window.application.blocks[blockName]) {\n            console.log('Такого блока не существует')\n        } else {\n            this.blocks[blockName](container)\n        }\n    },\n    timers: [],\n    level: [],\n}\n\nconst memoryGame = document.querySelector('.memory-game')\nmemoryGame.style.display = 'none'\n\nconst button = document.querySelector('.button-level')\n\nbutton.addEventListener('click', () => {\n    //событие по клику\n    const formLevel = document.querySelector('.form-level')\n\n    switch (\n        formLevel //сравнить выражение сразу с несколькими вариантами проверки статусов игроков\n    ) {\n        case 'buttonOne':\n            window.application.screens['screenLevelOne'] = screenLevelOne()\n            window.application.screens.screenLevelOne\n            break\n        case 'buttonTwo':\n            window.application.screens['screenLevelTwo'] = screenLevelTwo()\n            window.application.screens.screenLevelTwo\n            break\n        case 'buttonThree':\n            window.application.screens['screenLevelThree'] = screenLevelThree()\n            window.application.screens.screenLevelThree\n            break\n        default: // иначе уровень не выбран\n            console.log('Уровень сложности игры не выбран')\n            break\n    }\n})\n\nfunction screenLevelOne() {\n    const buttonOne = document.querySelector('.button-one-level')\n    buttonOne.addEventListener('click', () => {\n        //событие по клику)\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'block'\n        const cards = document.querySelectorAll('.memory-card')\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(6) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n    let timer\n    let secs = 0\n    if (timer) clearInterval(timer)\n    secs = 0\n    document.getElementById('timer').innerHTML = secs + ' сек.'\n    timer = setInterval(function () {\n        secs++\n        document.getElementById('timer').innerHTML = secs + ' сек.'\n    }, 1000)\n}\n\nfunction screenLevelTwo() {\n    const buttonTwo = document.querySelector('.button-two-level')\n    buttonTwo.addEventListener('click', () => {\n        // событие по клику\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'block'\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        const cards = document.querySelectorAll('.memory-card')\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(12) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n}\n\nfunction screenLevelThree() {\n    const buttonThree = document.querySelector('.button-three-level')\n    buttonThree.addEventListener('click', () => {\n        // событие по клику\n        const levelDiv = document.querySelector('.level-div')\n        levelDiv.style.display = 'block'\n\n        shuffle()\n\n        let hasFlippedCard = false\n        let lockBoard = false\n        let firstCard, secondCard\n\n        function flipCard() {\n            if (lockBoard) return\n            if (this === firstCard) return\n\n            this.classList.add('flip')\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true\n                firstCard = this\n                return\n            }\n\n            secondCard = this\n\n            checkForMatch()\n        }\n\n        function checkForMatch() {\n            let isMatch =\n                firstCard.dataset.framework === secondCard.dataset.framework\n            isMatch ? disableCards() : unflipCards()\n        }\n\n        function disableCards() {\n            firstCard.removeEventListener('click', flipCard)\n            secondCard.removeEventListener('click', flipCard)\n\n            resetBoard()\n        }\n\n        function unflipCards() {\n            lockBoard = true\n\n            setTimeout(() => {\n                firstCard.classList.remove('flip')\n                secondCard.classList.remove('flip')\n\n                resetBoard()\n            }, 1500)\n        }\n\n        function resetBoard() {\n            ;[hasFlippedCard, lockBoard] = [false, false]\n            ;[firstCard, secondCard] = [null, null]\n        }\n\n        const cards = document.querySelectorAll('.memory-card')\n\n        function shuffle() {\n            cards.forEach((card) => {\n                let ramdomPos = Math.floor(Math.random(18) * 36)\n                card.style.order = ramdomPos\n            })\n        }\n        cards.forEach((card) => card.addEventListener('click', flipCard))\n    })\n}\n"],"names":["window","application","blocks","screens","renderScreen","screenName","this","console","log","timers","forEach","element","clearInterval","renderBlock","blockName","container","level","document","querySelector","style","display","addEventListener","timer","cards","querySelectorAll","card","ramdomPos","Math","floor","random","order","firstCard","secondCard","hasFlippedCard","lockBoard","flipCard","classList","add","dataset","framework","removeEventListener","resetBoard","setTimeout","remove","secs","getElementById","innerHTML","setInterval","screenLevelOne","screenLevelTwo","screenLevelThree"],"sourceRoot":""}